---
globs: ['**/*.ts']
alwaysApply: false
---

**ESTRUTURE** uma análise de código em um plano de tarefas executável, convertendo violações de padrões em itens de TODO.

## Princípios (Core)

- **ALWAYS** transforme cada violação de padrão identificada em uma ou mais tarefas específicas usando a ferramenta `todo_write`.
- **ALWAYS** analise o código-fonte para confirmar uma violação antes de criar uma tarefa. Use `grep` e `codebase_search` para encontrar evidências.
- **NEVER** crie tarefas vagas como "Corrigir o controlador". A tarefa deve ser explícita, como "Mover a lógica de negócio de `CreateUserController` para `CreateUserService`".
- **PREFER** agrupar tarefas relacionadas a um mesmo arquivo ou funcionalidade para otimizar o trabalho de refatoração.

## Checklist de Análise para Geração de Tarefas

### Arquitetura & Design

- **Controller com Lógica de Negócio**: **VERIFIQUE** se controllers (`/src/controllers/**/*.ts`) contêm validações de negócio, manipulação de dados complexa ou qualquer lógica que não seja estritamente relacionada ao HTTP.
    - Se encontrar, **CRIE UMA TAREFA** para mover a lógica para o serviço correspondente.
- **Service Acessando DB Diretamente**: **VERIFIQUE** se serviços (`/src/services/**/*.ts`) importam ou usam o cliente Prisma (`@prisma/client`) diretamente.
    - Se encontrar, **CRIE UMA TAREFA** para mover o acesso a dados para um repositório em `/src/repositories/postgres`.
- **Lógica Duplicada**: **IDENTIFIQUE** blocos de código repetidos em diferentes arquivos (ex: validação de UUID, formatação de objetos).
    - Se encontrar, **CRIE UMA TAREFA** para abstrair a lógica em uma função helper compartilhada (ex: em `/src/controllers/_helpers`).

### TypeScript & Typing

- **Uso de `any`**: **PROCURE** por usos explícitos ou implícitos do tipo `any`.
    - Se encontrar, **CRIE UMA TAREFA** para substituir `any` por um tipo específico ou interface.
- **Exposição de Modelos Prisma**: **VERIFIQUE** se as respostas de API (retornos de controllers) expõem tipos gerados pelo Prisma.
    - Se encontrar, **CRIE UMA TAREFA** para introduzir um Data Transfer Object (DTO) ou um tipo de resposta pública, omitindo campos sensíveis como `password`.

### Validação & Tratamento de Erros

- **Ausência de Validação Zod**: **CONFIRME** se todos os endpoints que recebem `body` ou `params` possuem um schema Zod associado e se `.parseAsync()` é chamado.
    - Se não, **CRIE UMA TAREFA** para adicionar a validação de schema.
- **Tratamento de Erro Genérico**: **ANALISE** os blocos `catch` nos controllers. Se eles apenas capturam `Error` sem tratar casos específicos (`instanceof`), a resposta pode vazar detalhes internos.
    - **CRIE UMA TAREFA** para adicionar tratamento para erros de negócio customizados (ex: `UserNotFoundError`) e retornar respostas HTTP adequadas (`notFound()`, `badRequest()`).

### Testes

- **Falta de Cobertura**: **VERIFIQUE** se novas funcionalidades em serviços ou controllers possuem arquivos de teste (`.test.ts`) correspondentes.
    - Se não, **CRIE UMA TAREFA** para adicionar os testes em falta (unitários para serviços, integração para controllers).
- **Dados no Teste**: **PROCURE** por objetos complexos ou dados de teste definidos diretamente dentro de arquivos `.test.ts`.
    - Se encontrar, **CRIE UMA TAREFA** para mover esses dados para os arquivos de fixtures em `/src/test/fixtures`.

## Exemplos de Geração de Tarefas

### ✅ Correto

**Código Analisado (Controller com lógica de negócio):**

```typescript
// Em: src/controllers/users/create-user.ts
// ...
    async execute(httpRequest: HttpRequest) {
        // Issue: Lógica de negócio dentro do controller
        if (httpRequest.body.password !== httpRequest.body.password_confirmation) {
            return badRequest(new Error('Passwords do not match'));
        }
        // ... chama o serviço
    }
// ...
```

**Tarefa Gerada:**

```json
{
    "tool_name": "todo_write",
    "parameters": {
        "todos": [
            {
                "id": "refactor-create-user-controller",
                "content": "Mover a lógica de confirmação de senha de `CreateUserController` para `CreateUserService`",
                "status": "pending"
            }
        ]
    }
}
```

### ❌ Evitar

**Código Analisado (o mesmo de cima):**

**Tarefa Gerada (Vaga e Imprecisa):**

```json
{
    "tool_name": "todo_write",
    "parameters": {
        "todos": [
            {
                "id": "fix-user-controller",
                "content": "Corrigir o `CreateUserController`",
                "status": "pending"
            }
        ]
    }
}
```

## Escopo & Particularidades

- **Aplica-se a**: Qualquer solicitação de revisão, melhoria ou refatoração de código. O objetivo é transformar uma intenção aberta ("melhore este código") em um plano de ação concreto.
- **Não se aplica a**: Implementação de novas funcionalidades do zero.

## Referências

- As violações de padrão a serem detectadas são baseadas nas regras definidas em: `project.mdc`, `testing.mdc`.
