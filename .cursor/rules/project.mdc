---
globs: 'src/**/*.ts'
alwaysApply: true
---

**ESTABELEÇA** as convenções e padrões fundamentais do projeto e **GUIE** a IA na execução de tarefas de forma planejada.

## Princípios Fundamentais

- **ALWAYS** escrever código **e comentários** em **Inglês**.
- **ALWAYS** seguir **Clean Architecture**: `Controllers` → `Services` → `Repositories`.
- **ALWAYS** aplicar os princípios **SOLID** e **DRY**.
- **NEVER** acessar o banco de dados diretamente nos controllers – use **Repositories**.
- **NEVER** usar o tipo `any` – utilize tipos precisos ou **Zod**.
- **ALWAYS** usar helpers centralizados para respostas HTTP, erros e logs.

---

## Stack de Tecnologia & Escopo

- **Node.js** v20+
- **Framework**: Express 5
- **Linguagem**: TypeScript (modo **strict** obrigatório)
- **ORM**: Prisma / PostgreSQL
- **Validação**: Zod
- **Testes**: Jest
- **Ferramentas**: ESLint, Prettier, Husky
- **Módulos**: **ES Modules**
- **Escopo**: API Financeira B2B/B2C.

---

## Estrutura de Diretórios

- `src/controllers` – parsing, validação e chamadas de serviço.
- `src/services` – **toda** lógica de negócio.
- `src/repositories` – acesso ao banco via Prisma.
- `src/adapters` – integrações externas (hashing, fila, etc.).
- `src/schemas` – definições **Zod**.
- `src/shared` – helpers (HTTP, logger, tipos globais).

---

## Convenções de Nomeação

- **Variáveis/Funções**: `camelCase`
- **Classes/Interfaces/Tipos**: `PascalCase`
- **Arquivos**: `kebab-case` (`user-service.ts`)
- **Aliases**: `@/*` no `tsconfig.json`.
- **Exports**: **named exports** (evite `default`).
- **Arquivos `index.ts`**: apenas re-exports – **NUNCA** lógica.

---

## Pipeline Proativo de Execução de Tarefas

1. **ALWAYS** criar checklist com a ferramenta `todo` antes de codar.
2. **ALWAYS** começar por schemas **Zod** (contrato primeiro) e derivar `z.infer`.
3. **ALWAYS** implementar uma responsabilidade de cada vez (SRP).
4. **ALWAYS** marcar a tarefa como `completed` e rodar o linter ao finalizar.

---

## Padrões de Projeto

### Respostas HTTP

- **ALWAYS** usar helpers (`ok`, `created`, `badRequest`, `serverError`).
- **Shape padrão de sucesso**:
    ```json
    {
        "success": true,
        "message": "Operação bem-sucedida",
        "data": {}
    }
    ```

### Tratamento de Erros

- **ALWAYS** lançar erros customizados (`AppError`).
- **NEVER** expor stack trace para o cliente.
- Exemplo:
    ```ts
    throw new AppError('USER_NOT_FOUND', 404)
    ```

### Paginação & Ordenação

- Parâmetros: `page`, `limit`, `sortBy`, `order` (`asc` | `desc`).
- Defaults: `page=1`, `limit=20`.
- **ALWAYS** validar com Zod.

---

## Logging

- **MUST** usar logger centralizado.
- **ALWAYS** logar `method`, `path`, `userId`, `duration`.
- **ALWAYS** registrar stack trace em logs internos.

---

## Formatação & Lint

- **ALWAYS** usar Prettier + ESLint.
- **ALWAYS** preferir early return para evitar aninhamento profundo.
- Código **MUST** passar nos hooks do Husky.

---

## Exemplos

### ✅ Correto

```ts
// user.service.ts
export class UserService {
    constructor(private readonly userRepository: UserRepository) {}

    async create(params: CreateUserDTO): Promise<UserProfileDTO> {
        const user = await this.userRepository.create(params)
        return mapUserToProfileDTO(user) // não vaza modelo Prisma
    }
}
```

### ❌ Evitar

```ts
// user.controller.ts
const user = await prisma.user.create(req.body) // acesso direto + vazamento de modelo
return res.json(user) // resposta sem DTO, sem helper
```

---

## Referências

- `typescript.mdc`
- `testing.mdc`
- `controllers-standard.mdc`
- `build-improve-rules.mdc`
